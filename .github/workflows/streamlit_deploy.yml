name: Streamlit CI/CD

on:
  [push]

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install flake8
        run: pip install flake8

      - name: Run flake8 Linting
        run: |
          flake8 *.py --ignore=E501 || exit_code=$?   # Run flake8 and capture the exit code if it fails
          if [ "$exit_code" -eq 2 ]; then   # Check if the exit code is 2 (indicating an error)
            echo "flake8 errors found!"
            exit 2
          fi
        

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Check Streamlit App Execution
        run: |
          streamlit run app.py > app.log 2>&1 &  # Start the Streamlit app in the background
      
      - name: Upload Streamlit logs
        uses: actions/upload-artifact@v2
        with:
          name: streamlit-logs
          path: app.log

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies and pytest
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test]

    steps: 
      - name: Checkout 
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Deploy to Render.com
        uses: ttskch/render-deploy@v1.0.0
        with:
          service-id: ${{ secrets.SERVICEID }}
          api-key: ${{ secrets.RENDER }}
